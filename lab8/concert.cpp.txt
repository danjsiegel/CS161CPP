#include <iostream>
#include <string>
#include <cctype>
#include <algorithm>


using namespace std;

enum ticketStatus {AVAILABLE, SOLD};
enum ticketFloor {FLOOR, BALCONY, UPPER_BALCONY};
enum ticketDate {THURSDAY, FRIDAY, SATURDAY};
string displayFloor[3] = {"Floor", "Balcony", "Upper Balcony"};
string displayDay[3] = {"Thursday", "Friday", "Saturday"};
int ticketSoldPerDay[3];
int ticketCashAmountPerDay[3];
int priceArray[3] = {30, 20, 10};
int salesPerFloor[3] = {0, 0, 0};
int salesByDay[3] = {0, 0, 0};
int MAX_SEATS = 20;
int validDay (string dayinput);
int validFloor (string floorinput);

int main(){
	int ticket[UPPER_BALCONY+1][SATURDAY+1][MAX_SEATS];
	for(int section = FLOOR; section <= UPPER_BALCONY; section++){
	for(int day = THURSDAY; day <=SATURDAY; day++){
		for(int seat = 0; seat < MAX_SEATS; seat++){
			ticket[section][day][seat] = AVAILABLE;
			}
		}
	}
	string seatInput;
	int userDay, userFloor;

	while (seatInput != "x"){
	
	cout << "Enter a day, (T)hursday, (F)riday, (S)aturday, (x)exit" << endl;
	cout << "Enter a level, (F)loor, (B)alcony, (U)pper floor" << endl; 
	cin >> seatInput; 
	//turns the input into lowercase so that there is less logic to build into the program
	transform(seatInput.begin(), seatInput.end(), seatInput.begin(), ::tolower);			
	userDay = validDay(seatInput.substr(0,1));
	userFloor = validFloor(seatInput.substr(1,1));
	//cycles through the 20 seats per day/floor. If it finds an unsold ticket, it updates the value and breaks then stops
		if (userDay != 99 && userFloor != 99){
			for (int i = 0; i < MAX_SEATS; i++){
				if (ticket[userFloor][userDay][i] == 0){
					ticket[userFloor][userDay][i] = 1;
					break;			
				}		
			} 	
		}

	}
//Totals by floor and day
int totalDollarAmountOverall = 0;
int totalTicketsSoldOverall = 0;
for (int day = THURSDAY; day <=SATURDAY; day++){
	
	cout << displayDay[day] << endl;
	for(int section = FLOOR; section <= UPPER_BALCONY; section++){
			int sum = 0;
			int floorTotal = 0;	
				for(int seat = 0; seat < MAX_SEATS; seat++){										
					sum = sum + ticket[section][day][seat];
					}	
			floorTotal = sum * priceArray[section];		
			cout << "\t" <<  displayFloor[section] << " Tickets sold: " << sum << " $" << floorTotal << endl;
			totalDollarAmountOverall = totalDollarAmountOverall + floorTotal;
			totalTicketsSoldOverall = totalTicketsSoldOverall + sum;
			} 
	} 
//Total overall tickets 
cout << "Total tickets sold for all concerts: " << totalTicketsSoldOverall << " $" << totalDollarAmountOverall << endl;

//Total per floor
for (int section = FLOOR; section <= UPPER_BALCONY; section++){
	int allFloorSales = 0;
	for (int day = THURSDAY; day <=SATURDAY; day++){
		int sum = 0;
		int floorTotal = 0;
			for(int seat = 0; seat < MAX_SEATS; seat++){										
				sum = sum + ticket[section][day][seat];
				} 
			allFloorSales = allFloorSales + sum;
		} 
	salesPerFloor[section] = allFloorSales;
	}

for (int i = 0; i < 3; i++){
cout << "Total " << displayFloor[i] << " tickets sold for all concerts: " << salesPerFloor[i] << " $" << salesPerFloor[i] * priceArray[i] << endl;
}
//Totals by Day
for (int day = THURSDAY; day <=SATURDAY; day++){
	int overallTotal = 0;
	int overallDayDollarTotal = 0;
	for(int section = FLOOR; section <= UPPER_BALCONY; section++){
			int sum = 0;
			int dayTotal = 0;	
				for(int seat = 0; seat < MAX_SEATS; seat++){										
					sum = sum + ticket[section][day][seat];
					dayTotal = sum * priceArray[section];
					}
			overallTotal = overallTotal + sum;
			overallDayDollarTotal = overallDayDollarTotal + dayTotal;	
			} 
	cout << "Total Tickets sold for " << displayDay[day] << " concerts: " << overallTotal << " $" << overallDayDollarTotal << endl; 
}
	return 0;
	
}
//takes the first letter of the string as an argument. If it's a valid input, return a value within the range of the ticket array, else it will return 99
int validDay (string dayinput){
	int day = 99;
	if (dayinput == "t"){
		day = 0;
	} else if (dayinput == "f"){
		day = 1;	
	} else if (dayinput == "s"){
		day = 2;
	}
	return day; 
}

//Takes the 2nd letter of the user string as an argument. If it's a valid input, will return a value within the range of the ticket array, else it will return 99
int validFloor (string floorinput){
	int floor = 99;
	if (floorinput == "f"){
		floor = 0;
	} else if (floorinput == "b"){
		floor = 1;	
	} else if (floorinput == "u"){
		floor = 2;
	}
	return floor; 
}




Output recorded from running program: 
________________________________________________________________________________________________________
Enter a day, (T)hursday, (F)riday, (S)aturday, (x)exit
Enter a level, (F)loor, (B)alcony, (U)pper floor
tf
Enter a day, (T)hursday, (F)riday, (S)aturday, (x)exit
Enter a level, (F)loor, (B)alcony, (U)pper floor
tf
Enter a day, (T)hursday, (F)riday, (S)aturday, (x)exit
Enter a level, (F)loor, (B)alcony, (U)pper floor
fu
Enter a day, (T)hursday, (F)riday, (S)aturday, (x)exit
Enter a level, (F)loor, (B)alcony, (U)pper floor
fu
Enter a day, (T)hursday, (F)riday, (S)aturday, (x)exit
Enter a level, (F)loor, (B)alcony, (U)pper floor
fu
Enter a day, (T)hursday, (F)riday, (S)aturday, (x)exit
Enter a level, (F)loor, (B)alcony, (U)pper floor
sb
Enter a day, (T)hursday, (F)riday, (S)aturday, (x)exit
Enter a level, (F)loor, (B)alcony, (U)pper floor
sb
Enter a day, (T)hursday, (F)riday, (S)aturday, (x)exit
Enter a level, (F)loor, (B)alcony, (U)pper floor
sb
Enter a day, (T)hursday, (F)riday, (S)aturday, (x)exit
Enter a level, (F)loor, (B)alcony, (U)pper floor
fb
Enter a day, (T)hursday, (F)riday, (S)aturday, (x)exit
Enter a level, (F)loor, (B)alcony, (U)pper floor
fb
Enter a day, (T)hursday, (F)riday, (S)aturday, (x)exit
Enter a level, (F)loor, (B)alcony, (U)pper floor
tb
Enter a day, (T)hursday, (F)riday, (S)aturday, (x)exit
Enter a level, (F)loor, (B)alcony, (U)pper floor
tb
Enter a day, (T)hursday, (F)riday, (S)aturday, (x)exit
Enter a level, (F)loor, (B)alcony, (U)pper floor
x
Thursday
	Floor Tickets sold: 2 $60
	Balcony Tickets sold: 2 $40
	Upper Balcony Tickets sold: 0 $0
Friday
	Floor Tickets sold: 0 $0
	Balcony Tickets sold: 2 $40
	Upper Balcony Tickets sold: 3 $30
Saturday
	Floor Tickets sold: 0 $0
	Balcony Tickets sold: 3 $60
	Upper Balcony Tickets sold: 0 $0
Total tickets sold for all concerts: 12 $230
Total Floor tickets sold for all concerts: 2 $60
Total Balcony tickets sold for all concerts: 7 $140
Total Upper Balcony tickets sold for all concerts: 3 $30
Total Tickets sold for Thursday concerts: 4 $100
Total Tickets sold for Friday concerts: 5 $70
Total Tickets sold for Saturday concerts: 3 $60



